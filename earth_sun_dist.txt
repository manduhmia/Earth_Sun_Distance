import numpy as np 
    ##the numpy package is needed perform mathematical operations
import matplotlib.pyplot as plt 
    ##matplotlib is needed to graph the data
from astropy.time import Time 
    ##astropy.time.Time module is used to track the Earth in time
from astropy.coordinates import get_sun 
    ##the get_sun module calculates the distance from the Earth to the Sun

def earth_to_sun(jd):
    """
    Function for getting the distance from the Earth to the Sun in AU
    on a given date.
    
    Args:
        jd (float): Julian date at which the distance should be found
        
    Returns:
        distance (float): the distance from Earth to Sun in AU
    """

    time = Time(jd, format='jd') ## must create an atropy Time object with Julian date (jd) format
    sun = get_sun(time)
    distance = sun.distance.AU
    return distance

i = 0
## choose a start date in the 'iso' format (yyyy-mm-dd)
start_date = Time('2019-01-01').jd
jd_year = []
## creates a list of Julian dates for the next 365 days
while i < 365:  ## while loop limits can be changed to any length of time in days
    jd = start_date + i 
    i +=1
    jd_year.append(jd)

sun_distances = []
## here we create a list of distances to the sun in AU for each Julian date in jd_year
for j in jd_year:
    distance = earth_to_sun(j)
    sun_distances.append(distance)

## (optional)use numpy to find the indices of our graph's extreme distances 
min_ind = np.where(sun_distances == np.min(sun_distances))[0][0]
max_ind = np.where(sun_distances == np.max(sun_distances))[0][0]

## use the previous indices to find the Julian dates at which the extremal distances occur
min_date = Time(jd_year[min_ind], format='jd').iso[:10]
max_date = Time(jd_year[max_ind], format='jd').iso[:10]

plt.plot(jd_year, sun_distances)
plt.scatter(jd_year[min_ind], sun_distances[min_ind], marker='v',label='min dist. is %.3f AU on %s' %(sun_distances[min_ind], min_date), c='r')
plt.scatter(jd_year[max_ind], sun_distances[max_ind], marker='^',label='max dist. is %.3f AU on %s' %(sun_distances[max_ind], max_date), c='orange')
plt.xlabel('Time (jd)')
plt.ylabel('Distance (AU)')
plt.title('Earth-Sun Distance from %s to %s' %(Time(jd_year[0], format='jd').iso[:10], Time(jd_year[-1], format='jd').iso[:10]))
plt.legend(loc='best')
plt.show()